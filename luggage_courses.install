<?php
/**
 * @file 
 * Installation hooks for luggage_courses module.
 */

/**
 * Implements hook_install().
 *
 * Creates existing course locations.
 */
function luggage_courses_install() {
  global $user;

  // First revert the feature to install the content type and fields.
  features_revert_module('luggage_courses');

  $locations = _luggage_courses_fetch_location_data();
  if ($locations == FALSE) {
    watchdog('luggage_courses', t('Could not create location nodes.', array(), WATCHDOG_WARNING));
    return;
  }

  // Create location nodes.
  foreach ($locations as $location) {
    // First, create node.
    $values = array(
      'type' => 'course_location',
      'uid' => $user->uid,
      'status' => 1,
      'promote' => 0,
    );
    $entity = entity_create('node', $values);
    $ewrapper = entity_metadata_wrapper('node', $entity);

    // Then, set values.
    $ewrapper->title->set($location->title);
    $ewrapper->field_course_location_url->url = $location->url;

    // Save the location.
    $ewrapper->save();
  }
}

/**
 * Implements hook_uninstall()
 *
 * Removes modules's content types.
 */
function luggage_courses_uninstall() {
  $content_types = array('course', 'course_instructor', 'course_location');

  foreach ($content_types as $content_type) {
    // Make content type's fields deletable.
    db_query("UPDATE {node_type} SET custom = 1, locked = 0 WHERE type = :ctype", array(':ctype' => $content_type));
    drupal_flush_all_caches();
    node_type_delete($content_type);
  }
}

/**
 * Fetches course locations for Chemistry.
 *
 * @return array|FALSE
 *   array of objects containing location info or FALSE if there was an error.
 */
function _luggage_courses_fetch_location_data() {
  // Disable errors and warnings due to broken HTML.
  libxml_use_internal_errors(true);

  $base_url = 'http://www.fpm.iastate.edu/roomscheduling/';
  $locations = array();

  // Load class list page.
  $locations_list_html = file_get_contents($base_url . 'classrooms.asp?building=GILMAN+');
  if ($locations_list_html === FALSE) {
    return FALSE;
  }

  // Convert it to a DOM object.
  $dom = new DomDocument;
  if (!$dom->loadHTML($locations_list_html)) {
    return FALSE;
  }

  // Extract all location URLs.
  $elements = $dom->getElementsByTagName('a');
  if (!is_null($elements)) {
    foreach ($elements as $element) {
      $url = $element->getAttribute('href');
      if (strpos($url, 'room.asp') !== FALSE) {
        $location = new stdClass;
        $location->url = $base_url . $url;
        $location->title = preg_replace('/[ ]+/', ' ', $element->nodeValue);
        $locations[] = $location;
      }
    }
  }

  return $locations;
}
